# -*- coding: utf-8 -*-
"""
Created on Sat May 20 16:46:53 2023

@author: jcc234
"""

# Nuclear shuffling of foci
# To determine whether foci are genuinely associated with the chromosome axes it can be informative to artificially shuffle segmented foci around the nuclear space and compare the observed and randomly-distributed levels of axial colocalisation/proximity.

# Data:
# Images must have been segmented using the "Image Segmentation" ImageJ macro to generate nuclear masks ("Nuclear_Mask.tif"), axial masks ("Axial_Mask.tif") and foci labelmaps ("Watershed_Foci.tif").

# Specify package and data locations:
# Set the Meio_toolkit_path path below to the folder where you saved the meiosis_toolkit package.

# Set the img_library path below to the folder that contains the subfolders of image data to be analysed (trace files in .traces format). The script will cycle through the subfolders in the img_library location, all subfolders containing image metadata will be analysed in one batch.

# The foci_labelmap and axes_mask variables below should be set to match the names of the foci labelmap and axes mask output files generated by the "Image Segmentation" ImageJ macro. The default output names for these file are "Watershed_Foci.tif" and "Axes_Mask.tif" respectively.

#Automatically setting paths to repositories downloaded to the desktop, and image directories. 
import os
import sys

##############################################################################################
############### PATHS AND VARIABLES FOR MANUAL EDITING #######################################
##############################################################################################

desktop = os.path.expanduser("~/Desktop")
Meio_toolkit_path=os.path.join(desktop,"Meiotic-Image-Analysis-Toolkit-main")
img_library=os.path.join(Meio_toolkit_path,"Widefield_sample_data")

foci_labelmap="Watershed_Foci.tif"
axes_mask="Axes_Mask.tif"

# #Alternatively paths to repositories and image directories can be set manually. This is required if for example a OneDrive Desktop is being used
# #Note: on Windows systems use two backslashes or a forward slash as a file separator when setting paths e.g. "C:\Users\me\Path to folder"

# Meio_toolkit_path="C:/Users/jcc234/OneDrive - University of Exeter/Desktop/Meiotic-Image-Analysis-Toolkit-main"
# img_library="C:/Users/jcc234/OneDrive - University of Exeter/Meiotic-Image-Analysis-Toolkit-main/Widefield_sample_data"

#check if these automatic paths are valid
if not os.path.exists(Meio_toolkit_path):
    sys.exit("Error! Meio_toolkit_path not valid. Define manually")
      
if not os.path.exists(img_library):
    sys.exit("Error! img_library path not valid. Define manually")
      

# Specify foci filters and shuffling parameters
# Foci included in analysis are filtered by area measured in pixels. Inspect your images to determine reasonable minimum and maximum limits for foci area, and set the area_min and area_max variables below.

# The number of times that the script will shuffle the foci data in each image can be set using the shuffles variable below

area_min=3
area_max=100
shuffles=100


##############################################################################################
##############################################################################################
##############################################################################################



# Run nuclear shuffling:
# This will output results as "Observed_Distance_to_Axis.csv", "Shuffled_Distance_to_Axis.csv" files and "Size-selected_foci_labelmap.tif" and "Shuffled_foci_labelmap.tif" in the image metadata subfolders.

## Add package addresses to the environment
import sys
if not Meio_toolkit_path in sys.path:
    sys.path.append(Meio_toolkit_path)

from skimage import io
import meiosis_toolkit

## Identify image data and process
Folders=next(os.walk(img_library))[1]

for Folder in Folders:
    Folder_Path=os.path.join(img_library,Folder)
    #Only proceed if necessary files are present
    nucleus_found=any("Nuclear_Mask.tif" in file for file in os.listdir(Folder_Path))
    axes_found=any(axes_mask in file for file in os.listdir(Folder_Path))
    foci_found=any(foci_labelmap in file for file in os.listdir(Folder_Path))
    if (nucleus_found & axes_found & foci_found):
        nuclear_mask_path=os.path.join(Folder_Path,"Nuclear_Mask.tif")
        foci_path=os.path.join(Folder_Path,foci_labelmap)
        axis_mask_path=os.path.join(Folder_Path,axes_mask)
        Observed_Distance_to_Axis, Shuffled_Distance_to_Axis, Foci_Size_Selected_Img, Shuffled_Foci_Img=meiosis_toolkit.Whole_Nuclear_Shuffle(nuclear_mask_path,axis_mask_path,foci_path,area_min,area_max, shuffles)

        #Save output
        obs_distance_path=os.path.join(Folder_Path,"Observed_Distance_to_Axis.csv")
        Observed_Distance_to_Axis.to_csv(obs_distance_path)#Size selected focus distances to axis
        
        shf_distance_path=os.path.join(Folder_Path,"Shuffled_Distance_to_Axis.csv")
        Shuffled_Distance_to_Axis.to_csv(shf_distance_path)#Shuffled focus distances to axis
        
        size_selected_foci_path=os.path.join(Folder_Path, "Size-selected_foci_labelmap.tif")
        io.imsave(size_selected_foci_path, Foci_Size_Selected_Img, check_contrast =False)#Focus labelmap image of the size-selected foci included in processing
        
        shf_foci_path=os.path.join(Folder_Path,"Shuffled_foci_labelmap.tif")
        io.imsave(shf_foci_path, Shuffled_Foci_Img, check_contrast =False)#Example image of the shuffled foci in nuclear space

        print(Folder+" processed")

